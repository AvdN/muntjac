# Copyright (C) 2011 Vaadin Ltd
# Copyright (C) 2011 Richard Lincoln
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from __pyjamas__ import (ARGERROR,)
from com.vaadin.event.MethodEventSource import (MethodEventSource,)
from com.vaadin.event.ListenerMethod import (ListenerMethod,)
# from java.lang.reflect.Method import (Method,)
# from java.util.ArrayList import (ArrayList,)
# from java.util.Collection import (Collection,)
# from java.util.EventObject import (EventObject,)
# from java.util.Iterator import (Iterator,)
# from java.util.LinkedHashSet import (LinkedHashSet,)
# from java.util.List import (List,)


class EventRouter(MethodEventSource):
    """<code>EventRouter</code> class implementing the inheritable event listening
    model. For more information on the event model see the
    {@link com.vaadin.event package documentation}.

    @author IT Mill Ltd.
    @version
    @VERSION@
    @since 3.0
    """
    # List of registered listeners.
    _listenerList = None
    # Registers a new listener with the specified activation method to listen
    # events generated by this component. Don't add a JavaDoc comment here, we
    # use the default documentation from implemented interface.

    def addListener(self, *args):
        # Registers a new listener with the specified named activation method to
        # listen events generated by this component. Don't add a JavaDoc comment
        # here, we use the default documentation from implemented interface.

        _0 = args
        _1 = len(args)
        if _1 == 3:
            if isinstance(_0[2], Method):
                eventType, object, method = _0
                if self._listenerList is None:
                    self._listenerList = LinkedHashSet()
                self._listenerList.add(ListenerMethod(eventType, object, method))
            else:
                eventType, object, methodName = _0
                if self._listenerList is None:
                    self._listenerList = LinkedHashSet()
                self._listenerList.add(ListenerMethod(eventType, object, methodName))
        else:
            raise ARGERROR(3, 3)

    # Removes all registered listeners matching the given parameters. Don't add
    # a JavaDoc comment here, we use the default documentation from implemented
    # interface.

    def removeListener(self, *args):
        # Removes the event listener methods matching the given given paramaters.
        # Don't add a JavaDoc comment here, we use the default documentation from
        # implemented interface.

        _0 = args
        _1 = len(args)
        if _1 == 2:
            eventType, target = _0
            if self._listenerList is not None:
                i = self._listenerList
                while i.hasNext():
                    lm = i.next()
                    if lm.matches(eventType, target):
                        i.remove()
                        return
        elif _1 == 3:
            if isinstance(_0[2], Method):
                eventType, target, method = _0
                if self._listenerList is not None:
                    i = self._listenerList
                    while i.hasNext():
                        lm = i.next()
                        if lm.matches(eventType, target, method):
                            i.remove()
                            return
            else:
                eventType, target, methodName = _0
                methods = target.getClass().getMethods()
                method = None
                _0 = True
                i = 0
                while True:
                    if _0 is True:
                        _0 = False
                    else:
                        i += 1
                    if not (i < len(methods)):
                        break
                    if methods[i].getName() == methodName:
                        method = methods[i]
                if method is None:
                    raise self.IllegalArgumentException()
                # Remove the listeners
                if self._listenerList is not None:
                    i = self._listenerList
                    while i.hasNext():
                        lm = i.next()
                        if lm.matches(eventType, target, method):
                            i.remove()
                            return
        else:
            raise ARGERROR(2, 3)

    # Removes the event listener method matching the given given parameters.
    # Don't add a JavaDoc comment here, we use the default documentation from
    # implemented interface.

    # Find the correct method

    def removeAllListeners(self):
        """Removes all listeners from event router."""
        self._listenerList = None

    def fireEvent(self, event):
        """Sends an event to all registered listeners. The listeners will decide if
        the activation method should be called or not.

        @param event
                   the Event to be sent to all listeners.
        """
        # It is not necessary to send any events if there are no listeners
        if self._listenerList is not None:
            # Make a copy of the listener list to allow listeners to be added
            # inside listener methods. Fixes #3605.
            # Send the event to all listeners. The listeners themselves
            # will filter out unwanted events.
            listeners = list(self._listenerList)
            _0 = True
            i = 0
            while True:
                if _0 is True:
                    _0 = False
                else:
                    i += 1
                if not (i < len(listeners)):
                    break
                listeners[i].receiveEvent(event)

    def hasListeners(self, eventType):
        """Checks if the given Event type is listened by a listener registered to
        this router.

        @param eventType
                   the event type to be checked
        @return true if a listener is registered for the given event type
        """
        if self._listenerList is not None:
            for lm in self._listenerList:
                if lm.isType(eventType):
                    return True
        return False

    def getListeners(self, eventType):
        """Returns all listeners that match or extend the given event type.

        @param eventType
                   The type of event to return listeners for.
        @return A collection with all registered listeners. Empty if no listeners
                are found.
        """
        listeners = list()
        if self._listenerList is not None:
            for lm in self._listenerList:
                if lm.isOrExtendsType(eventType):
                    listeners.add(lm.getTarget())
        return listeners
