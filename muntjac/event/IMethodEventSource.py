# Copyright (C) 2010 IT Mill Ltd.
# Copyright (C) 2011 Richard Lincoln
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


class IMethodEventSource(object):
    """<p>
    Interface for classes supporting registration of methods as event receivers.
    </p>

    <p>
    For more information on the inheritable event mechanism see the
    {@link com.vaadin.event com.vaadin.event package documentation}.
    </p>

    @author IT Mill Ltd.
    @author Richard Lincoln
    @version @VERSION@
    @since 3.0
    """

    def addListener(self, eventType, obj, method):
        """<p>
        Registers a new event listener with the specified activation method to
        listen events generated by this component. If the activation method does
        not have any arguments the event object will not be passed to it when
        it's called.
        </p>

        <p>
        For more information on the inheritable event mechanism see the
        {@link com.vaadin.event com.vaadin.event package documentation}.
        </p>

        @param eventType
                   the type of the listened event. Events of this type or its
                   subclasses activate the listener.
        @param object
                   the object instance who owns the activation method.
        @param method
                   the activation method.
        @throws java.lang.IllegalArgumentException
                    unless <code>method</code> has exactly one match in
                    <code>object</code>
        ---
        <p>
        Registers a new listener with the specified activation method to listen
        events generated by this component. If the activation method does not
        have any arguments the event object will not be passed to it when it's
        called.
        </p>

        <p>
        This version of <code>addListener</code> gets the name of the activation
        method as a parameter. The actual method is reflected from
        <code>object</code>, and unless exactly one match is found,
        <code>java.lang.IllegalArgumentException</code> is thrown.
        </p>

        <p>
        For more information on the inheritable event mechanism see the
        {@link com.vaadin.event com.vaadin.event package documentation}.
        </p>

        @param eventType
                   the type of the listened event. Events of this type or its
                   subclasses activate the listener.
        @param object
                   the object instance who owns the activation method.
        @param methodName
                   the name of the activation method.
        @throws java.lang.IllegalArgumentException
                    unless <code>method</code> has exactly one match in
                    <code>object</code>
        """
        raise NotImplementedError


    def removeListener(self, eventType, obj, method):
        """Removes all registered listeners matching the given parameters. Since
        this method receives the event type and the listener object as
        parameters, it will unregister all <code>object</code>'s methods that are
        registered to listen to events of type <code>eventType</code> generated
        by this component.

        <p>
        For more information on the inheritable event mechanism see the
        {@link com.vaadin.event com.vaadin.event package documentation}.
        </p>

        @param eventType
                   the exact event type the <code>object</code> listens to.
        @param target
                   the target object that has registered to listen to events of
                   type <code>eventType</code> with one or more methods.
        ---
        Removes one registered listener method. The given method owned by the
        given object will no longer be called when the specified events are
        generated by this component.

        <p>
        For more information on the inheritable event mechanism see the
        {@link com.vaadin.event com.vaadin.event package documentation}.
        </p>

        @param eventType
                   the exact event type the <code>object</code> listens to.
        @param target
                   the target object that has registered to listen to events of
                   type eventType with one or more methods.
        @param method
                   the method owned by the target that's registered to listen to
                   events of type eventType.
        ---
        <p>
        Removes one registered listener method. The given method owned by the
        given object will no longer be called when the specified events are
        generated by this component.
        </p>

        <p>
        This version of <code>removeListener</code> gets the name of the
        activation method as a parameter. The actual method is reflected from the
        target, and unless exactly one match is found,
        <code>java.lang.IllegalArgumentException</code> is thrown.
        </p>

        <p>
        For more information on the inheritable event mechanism see the
        {@link com.vaadin.event com.vaadin.event package documentation}.
        </p>

        @param eventType
                   the exact event type the <code>object</code> listens to.
        @param target
                   the target object that has registered to listen to events of
                   type <code>eventType</code> with one or more methods.
        @param methodName
                   the name of the method owned by <code>target</code> that's
                   registered to listen to events of type <code>eventType</code>.
        """
        raise NotImplementedError
